const glob = require("glob");
const fs = require("fs-extra");
const path = require("path");

const attributesHeaderComment = "////\n" +
    "START GENERATED ATTRIBUTES\n" +
    "WARNING: This content is generated by running npm --prefix .build run generate:attributes\n" +
    "////\n";

const attributesFooterComment = "\n////\n" +
    "END GENERATED ATTRIBUTES\n" +
    "////";

const attributesFileName = path.join("_artifacts", "document-attributes.adoc");

const injectAttributes = () => {

    const rootDir = path.normalize(`${__dirname}/../../`);

    const rawAttributes = fs.readFileSync(path.join(rootDir, attributesFileName), "utf-8").toString();
    const lines = rawAttributes.split("\n");
    let lastCommentLine = 0;
    // If there is a // comment at the start of the file

    lines.some((line, index) => {
       if (line.startsWith("//")) {
           lastCommentLine = index + 1;
       } else {
           // Break once we are no longer in the comment
           return true;
       }
       return false;
    });


    const attributes = lines.slice(lastCommentLine).join("\n");

    console.log(`Injecting attributes:\n ${attributes}`);

    const ignoreFiles = [];

    const ignoreFilesGlobs = fs.readFileSync(path.normalize(`${__dirname}/../../.adocignore`), "utf-8").toString();

    ignoreFilesGlobs.split("\n").filter(line => !line.startsWith("#")).filter(line => line !== "").forEach(g => {
        const pattern = `${__dirname}/../../${g}`;
        ignoreFiles.push(...glob.sync(pattern));
    });

    console.log(`\ninto:\n`);

    glob(`${__dirname}/../../**/*.a?(scii)doc`, {}, (er, files) => {
        files.forEach(file => {
            // Skip if file is ignored
            if (ignoreFiles.includes(file)) return;
            const data = fs.readFileSync(file, "utf-8").toString();
            const stat = fs.statSync(file);
            const hIndex = data.indexOf(attributesHeaderComment);
            const fIndex = data.indexOf(attributesFooterComment);
            let output = data;
            let injected = `${attributesHeaderComment}${attributes}${attributesFooterComment}`;
            if (hIndex >= 0 && fIndex > 0) {
                console.log(file);
                const before = data.substring(0, hIndex);
                const after = data.substr(fIndex + attributesFooterComment.length);
                output = `${before}${injected}${after}`;
            }
            fs.writeFileSync(file, output, {encoding: "utf-8", mode: stat.mode});
        });
    });

};

injectAttributes();